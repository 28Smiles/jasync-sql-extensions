plugins {
    id "org.jetbrains.kotlin.jvm" version "1.3.50"
    id "antlr"
}

group "com.github.jasync-sql-extensions"
version "1.0.0"

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    antlr "org.antlr:antlr4:4.7.1"
    compile "org.antlr:antlr4-runtime:4.7.1"

    compile group: "com.google.guava", name: "guava", version: "28.2-jre"
    compile group: "joda-time", name: "joda-time", version: "2.10.5"

    compile group: "org.postgresql", name: "postgresql", version: "42.2.6"
    compile group: "com.github.jasync-sql", name: "jasync-common", version: "1.0.14"

    compile group: "org.ow2.asm", name: "asm", version: "7.3.1"
    compile group: "org.jetbrains.kotlin", name: "kotlin-stdlib-jdk8", version: "1.3.50"
    compile group: "org.jetbrains.kotlin", name: "kotlin-reflect", version: "1.3.50"

    testCompile group: "org.apache.commons", name: "commons-lang3", version: "3.9"
    testCompile group: "ru.yandex.qatools.embed", name: "postgresql-embedded", version: "2.10"
    testCompile group: "io.github.cdimascio", name: "java-dotenv", version: "5.1.0"
    testCompile group: "com.github.jasync-sql", name: "jasync-postgresql", version: "1.0.14"

    testCompile group: "org.junit.jupiter", name: "junit-jupiter-api", version: "5.5.1"
    testCompile group: "org.junit.jupiter", name: "junit-jupiter-engine", version: "5.5.1"
    testCompile group: "org.junit.jupiter", name: "junit-jupiter-params", version: "5.5.1"
    testCompile group: "org.junit.vintage", name: "junit-vintage-engine", version: "5.5.1"
}

test {
    useJUnitPlatform()
    testLogging {
        exceptionFormat = 'full'
    }
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

compileKotlin.dependsOn generateGrammarSource

if ("true" == System.getenv("DEPLOYER")) {
    apply plugin: "maven"
    apply plugin: "signing"

    task sourcesJar(type: Jar) {
        classifier = "sources"
        from sourceSets.main.allJava
    }

    task javadocJar(type: Jar) {
        dependsOn javadoc
        classifier = "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    signing {
        useGpgCmd()
        sign configurations.archives
    }

    uploadArchives {
        repositories {
            mavenDeployer {
                def username = project.hasProperty("mavenUser") ? mavenUser : "Unknown user"
                def password = project.hasProperty("mavenPassword") ? mavenPassword : "Unknown password"
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: username, password: password)
                }

                jar {
                    from "$rootDir/LICENSE.txt"
                }

                pom.project {
                    name project.name
                    description project.description
                    url "https://github.com/28Smiles/jasync-sql-extensions/"

                    scm {
                        connection "scm:git@github.com:28Smiles/jasync-sql-extensions.git"
                        developerConnection "scm:git@github.com:28Smiles/jasync-sql-extensions.git"
                        url "https://github.com/28Smiles/jasync-sql-extensions/"
                    }

                    licenses {
                        license {
                            name "The Apache Software License, Version 2.0"
                            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
                            distribution "repo"
                        }
                    }

                    developers {
                        developer {
                            id "28Smiles"
                            name "Leon Camus"
                            url "https://github.com/28Smiles"
                        }
                    }
                }
            }
        }
    }
}

apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.2"
}

task jacoco(dependsOn: [test, jacocoTestReport, jacocoTestCoverageVerification])

jacocoTestReport {
    reports {
        html.enabled = true
        xml.enabled = true
    }

    doLast {
        def report = file("${jacoco.reportsDir}/test/jacocoTestReport.xml")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def formTuple = {
            def covered = it."@covered" as Double
            def missed = it."@missed" as Double
            return new Tuple2<Double, Double>(covered, missed)
        }

        def percentage = {
            def (Double covered, Double missed) = it
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]

        metrics << [
                "instruction": formTuple(counters.find { (it."@type" == "INSTRUCTION") }),
                "branch"     : formTuple(counters.find { (it."@type" == "BRANCH") }),
                "line"       : formTuple(counters.find { (it."@type" == "LINE") }),
                "complexity" : formTuple(counters.find { (it."@type" == "COMPLEXITY") }),
                "method"     : formTuple(counters.find { (it."@type" == "METHOD") }),
                "class"      : formTuple(counters.find { (it."@type" == "CLASS") })
        ]

        // remember metrics for later, see build.gradle of nabla (root build.gradle)
        project.ext.jacocoMetrics = metrics

        logger.quiet("------------------ Code Coverage for " + project + " -----------------------")
        logger.quiet("HTML Report: ${[jacoco.reportsDir, "test", "html", "index.html"].join(File.separator)}")

        metrics.each {
            def metric = it.key as String
            logger.quiet("- ${metric} coverage rate is: ${percentage(it.value)}%")
        }

        logger.quiet("---------------------------------------------------------------")
    }
}
